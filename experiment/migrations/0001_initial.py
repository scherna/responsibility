# -*- coding: utf-8 -*-
# Generated by Django 1.11.2 on 2017-08-03 10:04
from __future__ import unicode_literals

import colorfield.fields
from django.db import migrations, models
import django.db.models.deletion
import sortedm2m.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
    ]

    operations = [
        migrations.CreateModel(
            name='Block',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='Name of Experiment Block')),
                ('num_trials', models.IntegerField(default=5, verbose_name='# Trials')),
                ('p_signal', models.FloatField(default=0.5, verbose_name='Probability of Signal')),
                ('v_hit_s', models.FloatField(default=1.0)),
                ('v_hit_n', models.FloatField(default=1.5)),
                ('v_miss_s', models.FloatField(default=-1.5)),
                ('v_miss_n', models.FloatField(default=-1.0)),
                ('v_cr_s', models.FloatField(default=0.0)),
                ('v_cr_n', models.FloatField(default=0.0)),
                ('v_fa_s', models.FloatField(default=0.0)),
                ('v_fa_n', models.FloatField(default=0.0)),
                ('d_user', models.FloatField(default=1.0, verbose_name="User Sensitivity (d')")),
                ('d_alert', models.FloatField(default=1.0, verbose_name="Alert Sensitivity (d')")),
                ('beta_alert', models.FloatField(default=0.5, verbose_name='Alert Criterion (beta)')),
                ('mean', models.FloatField(default=5.0, verbose_name='Mean (between signal/noise distributions)')),
                ('sd', models.FloatField(default=0.5, verbose_name='Standard Deviation')),
                ('stimulus', models.CharField(choices=[('num', 'Numbers'), ('rect', 'Rectangles')], default='num', max_length=200, verbose_name='Choice of Stimulus')),
                ('num_dec_places', models.IntegerField(default=1, verbose_name='# Decimal Places to Use for Stimulus')),
                ('alert_signal_color', colorfield.fields.ColorField(default='#f44141', max_length=18, verbose_name='Alert Color for Signal')),
                ('alert_noise_color', colorfield.fields.ColorField(default='#4ef442', max_length=18, verbose_name='Alert Color for Noise')),
                ('stimulus_duration', models.FloatField(default=5.0, verbose_name='Stimulus Duration (seconds)')),
                ('stimulus_delay', models.FloatField(default=0.0, verbose_name='Stimulus Delay (seconds)')),
                ('alert_duration', models.FloatField(default=5.0, verbose_name='Alert Duration (seconds)')),
                ('alert_delay', models.FloatField(default=0.0, verbose_name='Alert Delay (seconds)')),
                ('trial_duration', models.FloatField(default=5.0, verbose_name='Total Trial Duration (seconds)')),
                ('trial_delay', models.FloatField(default=3.0, verbose_name='Delay Between Trials (seconds)')),
                ('display_last_points', models.BooleanField(default=True, verbose_name='Display Points from Last Trial')),
                ('display_outcome', models.BooleanField(default=True, verbose_name='Display Points from Last Trial')),
                ('display_total_points', models.BooleanField(default=True, verbose_name='Display Cumulative Points')),
                ('display_trial_num', models.BooleanField(default=True, verbose_name='Display Number of Trial in Block')),
            ],
        ),
        migrations.CreateModel(
            name='BlockResult',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cum_score', models.FloatField(verbose_name='Cumulative Score')),
                ('hits', models.IntegerField(verbose_name='# Hits')),
                ('misses', models.IntegerField(verbose_name='# Misses')),
                ('fa', models.IntegerField(verbose_name='# FA')),
                ('cr', models.IntegerField(verbose_name='# CR')),
                ('p_hit', models.FloatField(verbose_name='Proportion of Hits (out of all signals)')),
                ('p_miss', models.FloatField(verbose_name='Proportion of Misses (out of all signals)')),
                ('p_fa', models.FloatField(verbose_name='Proportion of FA (out of all noise)')),
                ('p_cr', models.FloatField(verbose_name='Proportion of CR (out of all noise)')),
                ('d_prime', models.FloatField(verbose_name="Calculated User d'")),
                ('beta', models.FloatField(verbose_name='Calculated User beta')),
                ('c', models.FloatField(verbose_name="Calculated User c'")),
                ('hits_alertcorrect', models.IntegerField(verbose_name='# Hits With Correct Alert')),
                ('misses_alertcorrect', models.IntegerField(verbose_name='# Misses With Correct Alert')),
                ('fa_alertcorrect', models.IntegerField(verbose_name='# FA With Correct Alert')),
                ('cr_alertcorrect', models.IntegerField(verbose_name='# CR With Correct Alert')),
                ('hits_alertincorrect', models.IntegerField(verbose_name='# Hits With Incorrect Alert')),
                ('misses_alertincorrect', models.IntegerField(verbose_name='# Misses With Incorrect Alert')),
                ('fa_alertincorrect', models.IntegerField(verbose_name='# FA With Incorrect Alert')),
                ('cr_alertincorrect', models.IntegerField(verbose_name='# CR With Incorrect Alert')),
                ('p_hit_alertcorrect', models.FloatField(verbose_name='Proportion of Hits (out of all signals) With Correct Alert')),
                ('p_fa_alertcorrect', models.FloatField(verbose_name='Proportion of FA (out of all noise) With Correct Alert')),
                ('p_hit_alertincorrect', models.FloatField(verbose_name='Proportion of Hits (out of all signals) With Incorrect Alert')),
                ('p_fa_alertincorrect', models.FloatField(verbose_name='Proportion of FA (out of all noise) With Incorrect Alert')),
                ('rt_hit', models.FloatField(verbose_name='Average Response Time for Hit')),
                ('rt_miss', models.FloatField(verbose_name='Average Response Time for Miss')),
                ('rt_fa', models.FloatField(verbose_name='Average Response Time for FA')),
                ('rt_cr', models.FloatField(verbose_name='Average Response Time for CR')),
                ('block', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='experiment.Block')),
            ],
        ),
        migrations.CreateModel(
            name='Experiment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='Name of Experiment')),
            ],
        ),
        migrations.CreateModel(
            name='ExperimentResult',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('experiment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='experiment.Experiment')),
            ],
        ),
        migrations.CreateModel(
            name='Module',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('object_id', models.PositiveIntegerField()),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.ContentType')),
            ],
        ),
        migrations.CreateModel(
            name='OutputFile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='Name of File')),
                ('header', models.CharField(max_length=400, verbose_name='CSV Headers')),
                ('text', models.CharField(max_length=20000, verbose_name='CSV Text')),
            ],
        ),
        migrations.CreateModel(
            name='Question',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='Name of Question')),
                ('text', models.CharField(max_length=200, verbose_name='Question Text')),
                ('choices', models.CharField(blank=True, max_length=200, verbose_name='Answer Choices (separated by commas) / leave blank for open answer')),
            ],
        ),
        migrations.CreateModel(
            name='Questionnaire',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='Name of Questionnaire')),
                ('questions', sortedm2m.fields.SortedManyToManyField(help_text=None, to='experiment.Question')),
            ],
        ),
        migrations.CreateModel(
            name='QuestionnaireResult',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('experiment_result', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='experiment.ExperimentResult')),
                ('questionnaire', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='experiment.Questionnaire')),
            ],
        ),
        migrations.CreateModel(
            name='QuestionResult',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('answer', models.CharField(max_length=200, verbose_name='User Response')),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='experiment.Question')),
                ('questionnaire_result', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='experiment.QuestionnaireResult')),
            ],
        ),
        migrations.CreateModel(
            name='Text',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='Name of Text')),
                ('text', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='TrialResult',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('num_trial', models.IntegerField(verbose_name='# of Trial in Block')),
                ('time', models.DateTimeField(verbose_name='DateTime at End of Trial')),
                ('response_time', models.FloatField(verbose_name='Response Time (in seconds)')),
                ('signal', models.BooleanField(verbose_name='Stimulus Signal/Noise')),
                ('alert', models.BooleanField(verbose_name='Alert Signal/Noise')),
                ('response', models.CharField(max_length=200, verbose_name='User Response Signal/Noise')),
                ('outcome', models.CharField(max_length=200, verbose_name='Outcome (Hit/Miss/CR/FA)')),
                ('points', models.FloatField(verbose_name='Points from Trial')),
                ('block_result', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='experiment.BlockResult')),
                ('experiment_result', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='experiment.ExperimentResult')),
            ],
        ),
        migrations.AddField(
            model_name='experiment',
            name='modules',
            field=sortedm2m.fields.SortedManyToManyField(help_text=None, to='experiment.Module'),
        ),
        migrations.AddField(
            model_name='blockresult',
            name='experiment_result',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='experiment.ExperimentResult'),
        ),
    ]
